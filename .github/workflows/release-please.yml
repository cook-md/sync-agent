name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  build-packages:
    name: Build ${{ matrix.platform.name }}
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux x86_64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x86_64

          - name: macOS x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: macos-x86_64

          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: macos-aarch64

          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x86_64

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}

      - name: Install cargo-packager
        run: cargo install cargo-packager --locked

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev

      - name: Determine package format
        id: format
        run: |
          if [ "${{ matrix.platform.os }}" = "ubuntu-22.04" ]; then
            echo "format=appimage" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform.os }}" = "macos-latest" ]; then
            echo "format=dmg" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            echo "format=nsis" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build and Package
        run: cargo packager --release --target ${{ matrix.platform.target }} --formats ${{ steps.format.outputs.format }}
        env:
          CARGO_PACKAGER_SIGN_PRIVATE_KEY: ${{ secrets.CARGO_PACKAGER_SIGN_PRIVATE_KEY }}
          CARGO_PACKAGER_SIGN_PRIVATE_KEY_PASSWORD: ${{ secrets.CARGO_PACKAGER_SIGN_PRIVATE_KEY_PASSWORD }}
          CARGO_PACKAGER_PUBLIC_KEY: ${{ secrets.CARGO_PACKAGER_PUBLIC_KEY }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.platform.artifact_name }}
          path: |
            target/release/bundle/**/*.dmg
            target/release/bundle/**/*.AppImage
            target/release/bundle/**/*.exe
            target/release/bundle/**/*.msi
            target/release/bundle/**/*.sig
          if-no-files-found: error

  generate-manifest:
    name: Generate Update Manifest
    needs: [release-please, build-packages]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: find artifacts -type f

      - name: Generate manifest.json
        run: |
          VERSION="${{ needs.release-please.outputs.version }}"
          echo "Version: $VERSION"
          ./scripts/generate-manifest.sh "$VERSION" artifacts

      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: manifest
          path: manifest.json
          if-no-files-found: error

  publish-release:
    name: Publish GitHub Release
    needs: [release-please, build-packages, generate-manifest]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.dmg" -o -name "*.AppImage" -o -name "*.exe" -o -name "*.msi" -o -name "*.sig" \) -exec cp {} release-assets/ \;
          cp artifacts/manifest/manifest.json release-assets/
          ls -lh release-assets/

      - name: Upload assets to existing release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
