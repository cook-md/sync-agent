name: Build Release Packages (Sync Agent)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build packages for (e.g., cook-sync-v0.3.0)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-packages:
    # Only run if this is a cook-sync release OR manual trigger
    if: |
      (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'cook-sync-v')) ||
      (github.event_name == 'workflow_dispatch')

    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Universal Binary
          - platform: macos-latest
            rust-targets: x86_64-apple-darwin,aarch64-apple-darwin
            artifact-name: macos-universal
            package-type: dmg

          # Windows x86_64
          - platform: windows-latest
            rust-target: x86_64-pc-windows-msvc
            artifact-name: windows-x86_64
            package-type: msi

          # Linux x86_64 (Multiple formats)
          # Use Ubuntu 22.04 for broader GLIBC compatibility (GLIBC 2.35)
          - platform: ubuntu-22.04
            rust-target: x86_64-unknown-linux-gnu
            artifact-name: linux-x86_64
            package-type: multi

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.event.release.tag_name }}

      # Extract version from tag
      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG="${{ github.event.inputs.tag || github.event.release.tag_name }}"
          VERSION="${TAG#cook-sync-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # Setup Rust with proper environment
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-targets || matrix.rust-target }}

      - name: Setup Rust cache
        id: rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: sync-agent -> target
          prefix-key: v2-rust
          shared-key: sync-agent-${{ matrix.platform }}-release
          cache-directories: |
            sync-agent/target/x86_64-apple-darwin
            sync-agent/target/aarch64-apple-darwin
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST RUSTFLAGS
          cache-on-failure: true
          save-if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event_name == 'pull_request' }}

      - name: Report cache status
        shell: bash
        run: |
          echo "Cache hit: ${{ steps.rust-cache.outputs.cache-hit }}"
          if [ "${{ steps.rust-cache.outputs.cache-hit }}" = "true" ]; then
            echo "✅ Full cache hit - dependencies won't recompile"
          else
            echo "⚠️ Cache miss or partial hit - some dependencies may recompile"
          fi

      # macOS specific setup
      - name: Install macOS packaging tools
        if: startsWith(matrix.platform, 'macos')
        shell: bash
        run: |
          # Skip homebrew update to save time
          export HOMEBREW_NO_AUTO_UPDATE=1
          brew install create-dmg || true
          npm install -g appdmg || true

      # Windows specific setup
      - name: Install Windows dependencies
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          # Install OpenSSL via vcpkg to avoid Perl build issues
          vcpkg install openssl:x64-windows-static-md
          echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows-static-md" >> $GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV

      # Linux specific setup
      - name: Install Linux dependencies and packaging tools
        if: startsWith(matrix.platform, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            libxdo-dev \
            pkg-config \
            libfuse2 \
            ruby \
            ruby-dev \
            build-essential \
            rpm \
            dpkg-dev
          sudo gem install fpm

      # Build the sync agent
      - name: Build sync agent (macOS Universal)
        if: startsWith(matrix.platform, 'macos')
        shell: bash
        working-directory: ./sync-agent
        run: |
          # Build for both architectures
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

          # Create universal binary
          mkdir -p target/release
          lipo -create \
            target/x86_64-apple-darwin/release/cook-sync \
            target/aarch64-apple-darwin/release/cook-sync \
            -output target/release/cook-sync
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Build sync agent (Single Target)
        if: matrix.rust-target != ''
        shell: bash
        working-directory: ./sync-agent
        run: |
          cargo build --release --target ${{ matrix.rust-target }}
          # Copy to standard location
          mkdir -p target/release
          cp target/${{ matrix.rust-target }}/release/cook-sync* target/release/
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      # Create Windows MSI
      - name: Create Windows MSI
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        working-directory: ./sync-agent
        run: |
          ../.github/scripts/build-windows-msi.sh "${{ steps.version.outputs.version }}"

      # Import macOS signing certificate
      - name: Import macOS signing certificate
        if: startsWith(matrix.platform, 'macos') && env.APPLE_CERTIFICATE != ''
        shell: bash
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          set -e
          # Import certificate
          echo "Decoding certificate..."
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12

          echo "Creating keychain..."
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain

          echo "Importing certificate..."
          security import certificate.p12 -k temp.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions temp.keychain

          echo "✅ Certificate imported successfully"

      # Create macOS DMG
      - name: Create macOS DMG
        if: startsWith(matrix.platform, 'macos')
        shell: bash
        working-directory: ./sync-agent
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          ../.github/scripts/build-macos-dmg.sh "${{ steps.version.outputs.version }}"

      # Cleanup macOS signing artifacts
      - name: Cleanup macOS signing artifacts
        if: always() && startsWith(matrix.platform, 'macos')
        shell: bash
        run: |
          security delete-keychain temp.keychain || true
          rm -f certificate.p12 || true

      # Install linuxdeploy for AppImage creation
      - name: Install linuxdeploy
        if: startsWith(matrix.platform, 'ubuntu')
        id: install-linuxdeploy
        uses: miurahr/install-linuxdeploy-action@v1
        with:
          plugins: gtk

      # Create Linux packages
      - name: Create Linux packages
        if: startsWith(matrix.platform, 'ubuntu')
        shell: bash
        working-directory: ./sync-agent
        run: |
          ../.github/scripts/build-linux-packages.sh "${{ steps.version.outputs.version }}" "${{ steps.install-linuxdeploy.outputs.linuxdeploy }}"

      # Calculate SHA256 checksums
      - name: Calculate checksums
        shell: bash
        run: |
          cd sync-agent
          # Find all package files and calculate checksums
          find . -maxdepth 1 \( -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) -type f | while read file; do
            if command -v sha256sum &> /dev/null; then
              sha256sum "$file" | awk '{print $1 "  " $2}' > "${file}.sha256"
            elif command -v shasum &> /dev/null; then
              shasum -a 256 "$file" > "${file}.sha256"
            else
              echo "No sha256 command found"
              exit 1
            fi
            echo "Created checksum for $file"
          done

      # Upload release assets
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: |
            sync-agent/*.dmg
            sync-agent/*.dmg.sha256
            sync-agent/*.msi
            sync-agent/*.msi.sha256
            sync-agent/*.deb
            sync-agent/*.deb.sha256
            sync-agent/*.rpm
            sync-agent/*.rpm.sha256
            sync-agent/*.AppImage
            sync-agent/*.AppImage.sha256

  # Generate and upload manifest
  generate-update-manifest:
    needs: build-packages
    if: |
      (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'cook-sync-v')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Extract version from tag
      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG="${{ github.event.inputs.tag || github.event.release.tag_name }}"
          VERSION="${TAG#cook-sync-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # Download all release assets
      - name: Download release assets
        shell: bash
        run: |
          mkdir -p release-assets
          gh release download "${{ steps.version.outputs.tag }}" \
            --dir release-assets \
            --repo "${{ github.repository }}"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate manifest
        shell: bash
        run: |
          export VERSION="${{ steps.version.outputs.version }}"
          .github/scripts/generate-manifest.py
          cat latest.json

      # Upload manifest to release
      - name: Upload manifest to release
        shell: bash
        run: |
          gh release upload "${{ steps.version.outputs.tag }}" \
            latest.json \
            --repo "${{ github.repository }}" \
            --clobber
        env:
          GH_TOKEN: ${{ github.token }}

      # Upload to downloads server (optional)
      - name: Upload latest.json to downloads.cook.md root
        if: env.RELEASE_SERVER_HOST != ''
        env:
          RELEASE_SERVER_HOST: ${{ secrets.RELEASE_SERVER_HOST }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.RELEASE_SERVER_HOST }}
          username: ${{ secrets.RELEASE_SERVER_USERNAME }}
          key: ${{ secrets.RELEASE_SERVER_KEY }}
          source: latest.json
          target: thereciper/build/

      - name: Upload release assets to downloads.cook.md
        if: env.RELEASE_SERVER_HOST != ''
        env:
          RELEASE_SERVER_HOST: ${{ secrets.RELEASE_SERVER_HOST }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.RELEASE_SERVER_HOST }}
          username: ${{ secrets.RELEASE_SERVER_USERNAME }}
          key: ${{ secrets.RELEASE_SERVER_KEY }}
          source: release-assets/
          target: thereciper/build/sync-agent/v${{ steps.version.outputs.version }}/
          strip_components: 1
